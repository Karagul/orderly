% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{orderly_graph}
\alias{orderly_graph}
\title{Print the dependency tree for a given report using orderly log}
\usage{
orderly_graph(
  name,
  id = "latest",
  root = NULL,
  locate = TRUE,
  direction = "downstream",
  propagate = TRUE,
  max_depth = 100,
  show_all = FALSE
)
}
\arguments{
\item{name}{the name of the report}

\item{id}{the id of the report, if omitted, use the id of the latest report}

\item{root}{The path to an orderly root directory, or \code{NULL}
(the default) to search for one from the current working
directory if \code{locate} is \code{TRUE}.}

\item{locate}{Logical, indicating if the configuration should be
searched for.  If \code{TRUE} and \code{config} is not given,
then orderly looks in the working directory and up through its
parents until it finds an \code{orderly_config.yml} file.}

\item{direction}{A string indicating if we want to move up or down the tree
permitted values are upstream, downstream}

\item{propagate}{A boolean indicating if we want to propagate out of date
through the tree}

\item{max_depth}{A numeric, how far back should the tree go, this can be
useful to truncate a very large tree. (default = 100)}

\item{show_all}{A boolean, should we show all reports in the tree, not just
the latest.}
}
\value{
An orderly tree object with the root corresponding to the given
        report.
}
\description{
orderly allows a report to rely on the artefacts of one or more other
orderly reports. This allows users to develop a network of interconnected
reports where the output from report becomes the source of data for another.
There are two natural questions that can develop around this workflow:
}
\details{
1. We have updated a report and now need to re-run everything that depends
   on it.
2. We have a report that we want to re-run to ensure uses the latest
   information. Which other reports are used (directly or indirectly) by
   this report?

This function display this information in an easily readable format.
Allowing users to see the dependency tree and which reports are out of date
and need to be re-run.
}
\section{Remark}{

The tree is built using data from the local report database (see
\code{\link{orderly_commit}}). This means that it will not find changes from
a report that has not be run and committed. _i.e._ if a user changes a
report to use or create different artefacts this will not be picked up by
the function until the reports are re-run and committed to the archive.
}

\examples{
path <- orderly::orderly_example("demo")

id <- orderly::orderly_run("other", root = path, parameters=list(nmin=0))
orderly::orderly_commit(id, root = path)
id <- orderly::orderly_run("use_dependency", root = path)
orderly::orderly_commit(id, root = path)
id <- orderly::orderly_run("use_dependency_2", root = path)
orderly::orderly_commit(id, root = path)
orderly::orderly_graph("other", root = path)
orderly::orderly_graph("use_dependency_2", root = path,
                                 direction = "upstream")

}
